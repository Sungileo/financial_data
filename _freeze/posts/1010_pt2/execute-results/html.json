{
  "hash": "3a7c5ee45871bee96ab8c7f8f0a8bc96",
  "result": {
    "markdown": "---\ntitle: \"PT.2 - 벡터, 리스트, 팩터, 행렬\"\ndescription: \"2023-2학기 튜터링\"\nauthor: \"Sungil Park\"\ndate: \"2023/10/10\"\n---\n\n## tip\n\n`tap` 은 자동완성\n\n`F1` 은 함수 설명 문서 보기\n\n## 변수 지우기\n\n`rm` = `remove` 줄임말\n\n`ls()`는 전체 변수 출력\n\n`rm(list = ls())`는 전체변수 삭제\n\n`rm(변수명)`은 `변수명`만 삭제 \n\n\n::: {.cell}\n\n```{.r .cell-code}\nremove(list = ls())\nrm(list = ls())\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(변수명)\n```\n:::\n\n\n## 벡터\n\n`GNP <- c(2090,2450,960)`\n\n - GNP 라는 변수에 2090, 2450, 960 3개의 숫자 요소를 가진 벡터 생성\n\n`names(GNP) <- c(\"korea\",\"japan\",\"nepal\")`\n\n - 각 요소에 \"korea\", \"japan\", \"nepal\"의 이름 지정\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGNP <- c(2090,2450,960)\nnames(GNP) <- c(\"korea\",\"japan\",\"nepal\")\n```\n:::\n\n\n\n### 요소에 지정된 이름으로 값 출력 (인덱싱)\n\n단일 값 출력\n\n::: {.cell}\n\n```{.r .cell-code}\nGNP[\"korea\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nkorea \n 2090 \n```\n:::\n:::\n\n\n벡터 사용 여러개의 값 출력\n\n::: {.cell}\n\n```{.r .cell-code}\nGNP[c(\"korea\",\"nepal\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nkorea nepal \n 2090   960 \n```\n:::\n:::\n\n\n## 변수에 조건을 지정하기\n\n`d` 라는 변수에 1~9까지의 숫자 벡터 생성\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- c(1,2,3,4,5,6,7,8,9)\nd <- c(1:9) \n```\n:::\n\n\n\n`condi` 라는 변수에 7이하 & 3이상을 만족하는 `d` 지정\n\n - `TRUE`, `FALSE` 값으로 출력\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncondi <- d <= 7 & d >= 3\n\ncondi\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE\n```\n:::\n:::\n\n\n - 인덱싱으로 `d`에서의 값 출력하기\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd[condi]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 4 5 6 7\n```\n:::\n:::\n\n\n`&` : 두 조건을 모두 만족해야됨, (7보다 작으면서, 3보다 큰 수)\n\n`|` : 두 조건중 하나만 만족하면됨, (7보다 크거나, 3보다 작거나), (엔터키 위 `shift` + `\\`)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncondi_2 <- d <= 3 | d >= 7\nd[condi]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 4 5 6 7\n```\n:::\n:::\n\n\n## 리스트\n\n - 벡터는 한가지 타입의 요소들만을 담을 수 있음 (숫자면 숫자만, 문자면 문자만)\n \n - 리스트는 여러가지 타입의 요소를 담을 수 있음\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_example <- list(1, 2, c(3,4), \"munja\", TRUE, FALSE)\n\nlist_example\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 1\n\n[[2]]\n[1] 2\n\n[[3]]\n[1] 3 4\n\n[[4]]\n[1] \"munja\"\n\n[[5]]\n[1] TRUE\n\n[[6]]\n[1] FALSE\n```\n:::\n:::\n\n\n### 리스트와 생성\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy.info <- list(name='Tom', \n                age=60, \n                status=TRUE, \n                score=c(90, 85, 70, 84))\n```\n:::\n\n\n### 리스트 출력\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy.info\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$name\n[1] \"Tom\"\n\n$age\n[1] 60\n\n$status\n[1] TRUE\n\n$score\n[1] 90 85 70 84\n```\n:::\n:::\n\n\n### 리스트의 인덱싱\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 첫째 요소\nmy.info[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$name\n[1] \"Tom\"\n```\n:::\n\n```{.r .cell-code}\n# 이름이 name인 요소\nmy.info$name\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Tom\"\n```\n:::\n\n```{.r .cell-code}\n# 리스트의 2,3번쨰 요소\nmy.info[c(2,3)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$age\n[1] 60\n\n$status\n[1] TRUE\n```\n:::\n:::\n\n\n## 팩터\n\n - 팩터는 범주형 데이터를 지정하는데 사용\n\n - 예시)\n \n     - `bt.vct` 라는 문자형 변수 벡터 지정\n\n     - `bt.fct` 라는 팩터 지정\n\n### 팩터 요소 확인하기\n\n::: {.cell}\n\n```{.r .cell-code}\nbt.vct <- c('A','B','B','O','AB','A')\n\nbt.fct <- factor(bt.vct)\n```\n:::\n\n\n`str()`함수는 지정한 변수의 타입을 확인할때 사용\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(bt.vct)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n chr [1:6] \"A\" \"B\" \"B\" \"O\" \"AB\" \"A\"\n```\n:::\n\n```{.r .cell-code}\nstr(bt.fct)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Factor w/ 4 levels \"A\",\"AB\",\"B\",\"O\": 1 3 3 4 2 1\n```\n:::\n:::\n\n\n`levels()`함수는 팩터 변수의 요소값을 확인할때 사용 \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(bt.fct)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"A\"  \"AB\" \"B\"  \"O\" \n```\n:::\n:::\n\n\n### 팩터의 인덱싱\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbt.fct[5]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] AB\nLevels: A AB B O\n```\n:::\n\n```{.r .cell-code}\nbt.fct[c(2,5)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] B  AB\nLevels: A AB B O\n```\n:::\n:::\n\n\n팩터,벡터를 숫자형으로 바꾸기\n\n::: {.cell}\n\n```{.r .cell-code}\nas.integer(bt.fct)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 3 3 4 2 1\n```\n:::\n\n```{.r .cell-code}\nas.integer(bt.vct)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: 강제형변환에 의해 생성된 NA 입니다\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA NA NA NA NA NA\n```\n:::\n:::\n\n\n### 팩터에 값 추가\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 기존 6개 값을 가진 팩터에 7번째 값 추가\nbt.fct[7] <- 'B'\nbt.fct\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] A  B  B  O  AB A  B \nLevels: A AB B O\n```\n:::\n:::\n\n\n### 요소 외 값 추가\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 팩터 요소(A, AB, B, O)에 포함되지 않은 값을 추가하면..\n# Warning message = 경고(O), 에러(X)\n# NA 값으로 입력됨\nbt.fct[8] <- 'C'     \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in `[<-.factor`(`*tmp*`, 8, value = \"C\"): 요인의 수준(factor level)이\n올바르지 않아 NA가 생성되었습니다.\n```\n:::\n\n```{.r .cell-code}\nbt.fct\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] A    B    B    O    AB   A    B    <NA>\nLevels: A AB B O\n```\n:::\n:::\n\n\n### 팩터의 요소 추가\n\n - `levels()` 함수를 써서 `\"C\"` 요소 추가\n\n - 8번째 값에 `\"C\"` 추가\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(bt.fct) <- c(levels(bt.fct),\"C\")\nbt.fct[8] <- 'C'     \nbt.fct\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] A  B  B  O  AB A  B  C \nLevels: A AB B O C\n```\n:::\n:::\n\n\n\n## 행렬 (matrix)\n\n### 행렬의 생성\n\n`z` 라는 변수에 1~20 의 값, 4행 5열의 행렬 생성 (행 우선)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nz <- matrix(1:20, nrow=4, ncol=5)\nz\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    5    9   13   17\n[2,]    2    6   10   14   18\n[3,]    3    7   11   15   19\n[4,]    4    8   12   16   20\n```\n:::\n:::\n\n\n`z1` 라는 변수에 1~20 의 값, 4행 5열의 행렬 생성 (열 우선)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nz1 <- matrix(1:20, nrow=4, ncol=5, byrow=TRUE)\nz1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    2    3    4    5\n[2,]    6    7    8    9   10\n[3,]   11   12   13   14   15\n[4,]   16   17   18   19   20\n```\n:::\n:::\n\n\n### 행렬 붙히기 (combine)\n\n`x`, `y`라는 변수에 4개의 값을 가진 벡터 생성\n\n`z` 라는 변수에 1~20 의 값, 4행 5열의 행렬 생성\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:4\ny <- 5:8\nz <- matrix(1:20, nrow=4, ncol=5)\n```\n:::\n\n\n`cbind()` 함수는 열 기준으로 값을 붙힌다.(column bind)\n\n`rbind()` 함수는 행 기준으로 값을 붙힌다.(row bind)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm1 <- cbind(x,y)\nm1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     x y\n[1,] 1 5\n[2,] 2 6\n[3,] 3 7\n[4,] 4 8\n```\n:::\n\n```{.r .cell-code}\nm2 <- rbind(x,y)\nm2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [,1] [,2] [,3] [,4]\nx    1    2    3    4\ny    5    6    7    8\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nm3 <- rbind(m2,x)\nm3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [,1] [,2] [,3] [,4]\nx    1    2    3    4\ny    5    6    7    8\nx    1    2    3    4\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nm4 <- cbind(z,x)\nm4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                  x\n[1,] 1 5  9 13 17 1\n[2,] 2 6 10 14 18 2\n[3,] 3 7 11 15 19 3\n[4,] 4 8 12 16 20 4\n```\n:::\n:::\n\n\n### 행렬의 인덱싱\n\n - python과는 달리 1부터 시작\n\n\n::: {.cell}\n\n```{.r .cell-code}\nz <- matrix(1:20, nrow=4, ncol=5)\nz\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    5    9   13   17\n[2,]    2    6   10   14   18\n[3,]    3    7   11   15   19\n[4,]    4    8   12   16   20\n```\n:::\n:::\n\n\n`matrix[행, 열]`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 2행 3열의 값\nz[2,3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n\n```{.r .cell-code}\n# 2행의 모든 값\nz[2,]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2  6 10 14 18\n```\n:::\n\n```{.r .cell-code}\n# 4열의 모든 값\nz[,4]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 13 14 15 16\n```\n:::\n\n```{.r .cell-code}\n# 모든 값\nz[]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    5    9   13   17\n[2,]    2    6   10   14   18\n[3,]    3    7   11   15   19\n[4,]    4    8   12   16   20\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# 2행 1~3열의 값\nz[2, 1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2  6 10\n```\n:::\n\n```{.r .cell-code}\n# 1행 1, 2, 4 열의 값\nz[1, c(1,2,4)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  5 13\n```\n:::\n\n```{.r .cell-code}\n# 1~2행의 모든 값\nz[1:2, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    5    9   13   17\n[2,]    2    6   10   14   18\n```\n:::\n\n```{.r .cell-code}\n# 1열, 4열의 모든 값\nz[, c(1,4)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    1   13\n[2,]    2   14\n[3,]    3   15\n[4,]    4   16\n```\n:::\n:::\n\n\n### 행렬의 행이름, 열이름 넣기\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscore <- matrix(c(90,85,69,78,85,96,49,95,90,80,70,60), nrow=4, ncol=3)\ncolnames(score) <- c(\"국어\",\"영어\",\"수학\")\nrownames(score) <- c(\"철수\",\"영희\",\"릅신\",\"조던\")\nscore\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     국어 영어 수학\n철수   90   85   90\n영희   85   96   80\n릅신   69   49   70\n조던   78   95   60\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}